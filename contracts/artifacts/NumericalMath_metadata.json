{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "seed",
						"type": "bytes"
					}
				],
				"name": "callKeccak256",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "bigNum",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "lower",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "upper",
						"type": "int256"
					}
				],
				"name": "convBtwUpLo",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "theta",
						"type": "int256"
					},
					{
						"internalType": "uint8",
						"name": "digits",
						"type": "uint8"
					}
				],
				"name": "cos",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "num_seed",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "lower",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "upper",
						"type": "int256"
					}
				],
				"name": "getRandomNum",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pi",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "bigNum",
						"type": "int256"
					}
				],
				"name": "publicTest",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "theta",
						"type": "int256"
					},
					{
						"internalType": "uint8",
						"name": "digits",
						"type": "uint8"
					}
				],
				"name": "sin",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "theta",
						"type": "int256"
					},
					{
						"internalType": "uint8",
						"name": "digits",
						"type": "uint8"
					}
				],
				"name": "tan",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "John Michael Statheros (GitHub: jstat17)",
			"kind": "dev",
			"methods": {
				"callKeccak256(bytes)": {
					"params": {
						"seed": ": bytes object"
					},
					"returns": {
						"_0": "int256 of hashed seed"
					}
				},
				"convBtwUpLo(int256,int256,int256)": {
					"params": {
						"bigNum": ": int256 of some large number",
						"lower": ": lower-bound of the output number",
						"upper": ": upper-bound of the output number"
					},
					"returns": {
						"_0": "int256 between upper and lower (inclusive)"
					}
				},
				"cos(int256,uint8)": {
					"details": "Example input:  cos(11,1) => cos(1.1)                      cos(3,0) => cos(3)",
					"params": {
						"digits": ": digits of precision of the angle",
						"theta": ": angle in radians"
					},
					"returns": {
						"_0": "cos(x)"
					}
				},
				"getRandomNum(int256,int256,int256)": {
					"params": {
						"lower": ": lower-bound of the random number",
						"num_seed": ": integer seed",
						"upper": ": upper-bound of the random number"
					},
					"returns": {
						"_0": "random int256 between upper and lower (inclusive)"
					}
				},
				"pi()": {
					"returns": {
						"_0": "Ï€ as int256"
					}
				},
				"sin(int256,uint8)": {
					"details": "Example input:  sin(11,1) => sin(1.1)                      sin(3,0) => sin(3)",
					"params": {
						"digits": ": digits of precision of the angle",
						"theta": ": angle in radians"
					},
					"returns": {
						"_0": "sin(x)"
					}
				},
				"tan(int256,uint8)": {
					"details": "Example input:  tan(11,1) => tan(1.1)                      tan(3,0) => tan(3)",
					"params": {
						"digits": ": digits of precision of the angle",
						"theta": ": angle in radians"
					},
					"returns": {
						"_0": "tan(x)"
					}
				}
			},
			"title": "NumericalMath",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"callKeccak256(bytes)": {
					"notice": "Helper function to hash a seed using keccak256."
				},
				"convBtwUpLo(int256,int256,int256)": {
					"notice": "Helper function to convert some large number to be between an upper and lower bound."
				},
				"cos(int256,uint8)": {
					"notice": "6th order numerical approximation to the cosine function."
				},
				"getRandomNum(int256,int256,int256)": {
					"notice": "Generates a random int256 between some upper and lower bounds using an int256 seed."
				},
				"pi()": {
					"notice": "Returns value of pi to 24 digits of precision."
				},
				"sin(int256,uint8)": {
					"notice": "7th order numerical approximation to the sine function."
				},
				"tan(int256,uint8)": {
					"notice": "Numerical approximation of the tangent function, using the fact that sin(x)/cos(x) = tan(x)."
				}
			},
			"notice": "This library builds on the fixed-point math in FixidityLib with numerical approximations to trigonometric functions, the value of pi, generation of pseudorandom numbers etc.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"NumericalMath.sol": "NumericalMath"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"FixidityLib.sol": {
			"keccak256": "0x409ec8701ea9f04a90558c5ae997fe6d6c554d4a9d6995052c6538b69d27bdd6",
			"license": "MIT",
			"urls": [
				"bzz-raw://3fab26fd072860809cbc1c1b3fa74206602d11f241a5802c667e27e34755bb0a",
				"dweb:/ipfs/QmZ6xc2AaoT15ncgF2rVSzK28nrjyTN6Z5Fg33p5F3447C"
			]
		},
		"NumericalMath.sol": {
			"keccak256": "0x89a7d1fec3de5716a422afcc0b9db813542b3caa8db7c054994c6bf6b5d8e454",
			"license": "MIT",
			"urls": [
				"bzz-raw://9d79e8ca27acd7b11e09e2d78c65f44be81d72e90ac79f5029b333c63b1b57ab",
				"dweb:/ipfs/QmRLtRVJmfNezWGSTtnfPoP4hyb3zDdvpnSwXsewNA8zcJ"
			]
		}
	},
	"version": 1
}