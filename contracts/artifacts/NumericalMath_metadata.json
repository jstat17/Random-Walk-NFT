{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "seed",
						"type": "bytes"
					}
				],
				"name": "callKeccak256",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "bigNum",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "lower",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "upper",
						"type": "int256"
					}
				],
				"name": "convBtwUpLo",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "theta",
						"type": "int256"
					},
					{
						"internalType": "uint8",
						"name": "digits",
						"type": "uint8"
					}
				],
				"name": "cos",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "x",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "y_orig",
						"type": "int256"
					}
				],
				"name": "getAnotherSplitRand",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "num_seed",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "lower",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "upper",
						"type": "int256"
					}
				],
				"name": "getRandomNum",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pi",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "theta",
						"type": "int256"
					},
					{
						"internalType": "uint8",
						"name": "digits",
						"type": "uint8"
					}
				],
				"name": "sin",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "theta",
						"type": "int256"
					},
					{
						"internalType": "uint8",
						"name": "digits",
						"type": "uint8"
					}
				],
				"name": "tan",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "John Michael Statheros (GitHub: jstat17)",
			"kind": "dev",
			"methods": {
				"callKeccak256(bytes)": {
					"params": {
						"seed": ": bytes object"
					},
					"returns": {
						"_0": "int256 of hashed seed"
					}
				},
				"convBtwUpLo(int256,int256,int256)": {
					"params": {
						"bigNum": ": int256 of some large number",
						"lower": ": lower-bound of the output number",
						"upper": ": upper-bound of the output number"
					},
					"returns": {
						"_0": "int256 between upper and lower (inclusive)"
					}
				},
				"cos(int256,uint8)": {
					"details": "Example input:  cos(11,1) => cos(1.1)                      cos(3,0) => cos(3)",
					"params": {
						"digits": ": digits of precision of the angle",
						"theta": ": angle in radians"
					},
					"returns": {
						"_0": "cos(x)"
					}
				},
				"getAnotherSplitRand(int256,int256,int256)": {
					"details": "take note that this only generates a random number between 1 and an upper bound. Should update so that any range can be generated.",
					"params": {
						"x": ": the large random number",
						"y": ": the upper bound of the random number, but this value must mutate with each successive call of this function.",
						"y_orig": ": the original and unmutating upper bound of the random number"
					},
					"returns": {
						"_0": "new_rand: the new random number that is between 1 and upper",
						"_1": "y: the mutated form of the upper bound that must be used as the y in the next call of this function"
					}
				},
				"getRandomNum(int256,int256,int256)": {
					"params": {
						"lower": ": lower-bound of the random number",
						"num_seed": ": integer seed",
						"upper": ": upper-bound of the random number"
					},
					"returns": {
						"_0": "random int256 between upper and lower (inclusive)"
					}
				},
				"pi()": {
					"returns": {
						"_0": "Ï€ as int256"
					}
				},
				"sin(int256,uint8)": {
					"details": "Example input:  sin(11,1) => sin(1.1)                      sin(3,0) => sin(3)",
					"params": {
						"digits": ": digits of precision of the angle",
						"theta": ": angle in radians"
					},
					"returns": {
						"_0": "sin(x)"
					}
				},
				"tan(int256,uint8)": {
					"details": "Example input:  tan(11,1) => tan(1.1)                      tan(3,0) => tan(3)",
					"params": {
						"digits": ": digits of precision of the angle",
						"theta": ": angle in radians"
					},
					"returns": {
						"_0": "tan(x)"
					}
				}
			},
			"title": "NumericalMath",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"callKeccak256(bytes)": {
					"notice": "Helper function to hash a seed using keccak256."
				},
				"convBtwUpLo(int256,int256,int256)": {
					"notice": "Helper function to convert some large number to be between an upper and lower bound."
				},
				"cos(int256,uint8)": {
					"notice": "6th order numerical approximation to the cosine function."
				},
				"getAnotherSplitRand(int256,int256,int256)": {
					"notice": "I saw Patrick Collins use this method in a Chainlink video tutorial, where he took a large random number and broke it up into multiple random numbers. The use case is for verifiably random number generation, so that multiple random numbers do not need to be generated."
				},
				"getRandomNum(int256,int256,int256)": {
					"notice": "Generates a random int256 between some upper and lower bounds using an int256 seed."
				},
				"pi()": {
					"notice": "Returns value of pi to 24 digits of precision."
				},
				"sin(int256,uint8)": {
					"notice": "7th order numerical approximation to the sine function."
				},
				"tan(int256,uint8)": {
					"notice": "Numerical approximation of the tangent function, using the fact that sin(x)/cos(x) = tan(x)."
				}
			},
			"notice": "This library builds on the fixed-point math in FixidityLib with numerical approximations to trigonometric functions, the value of pi, generation of pseudorandom numbers etc.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"NumericalMath.sol": "NumericalMath"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"FixidityLib.sol": {
			"keccak256": "0x2a27b0f9b016c60cb5147d7649968406d50721d551980274d949b148174b3c89",
			"license": "MIT",
			"urls": [
				"bzz-raw://f9868d2aaab5828afa5b0ff2a88f98e6291fdbae010009fe20b39d2958b254fc",
				"dweb:/ipfs/Qmaw29EUeGF7bkjXcEMUdHdGKjaFrmayStsPQHHPNvbj2y"
			]
		},
		"NumericalMath.sol": {
			"keccak256": "0x710697fefc0c82244f1e6d3bd28efbab2637f18b0e333d7182243063abaf7403",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ab7c9bdb580d3adf4cc02e5c713feb1743434ff15568433083a5582ce27dbe9",
				"dweb:/ipfs/QmWRPbj4Sqi7iYLLPNpxJ6U1RGNtt6W65uYwTW8NPjuQ7k"
			]
		}
	},
	"version": 1
}